// Code generated by data parser.
// DO NOT EDIT!
package entity

import (
	"bytes"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"ngengine/module/object"

	"github.com/mysll/toolkit"
)

var _ = json.Marshal
var _ = toolkit.ParseNumber

// Scene archive
type SceneArchive struct {
	root object.Object `xorm:"-"`
	flag int           `xorm:"-"`

	Id int64
}

// Scene archive construct
func NewSceneArchive(root object.Object) *SceneArchive {
	archive := &SceneArchive{root: root}

	return archive
}

// archive table name
func (a SceneArchive) TableName() string {
	return ""
}

// set id
func (a *SceneArchive) SetId(val int64) {
	a.Id = val
}

// db id
func (a *SceneArchive) DBId() int64 {
	return a.Id
}

// Scene archive
type SceneArchiveBak struct {
	Id int64
}

// archive table name
func (a SceneArchiveBak) TableName() string {
	return "_bak"
}

// set id
func (a *SceneArchiveBak) SetId(val int64) {
	a.Id = val
}

// db id
func (a *SceneArchiveBak) DBId() int64 {
	return a.Id
}

// Scene attr
type SceneAttr struct {
	root object.Object

	Name     string // 场景名
	Resource string // 资源
}

// Scene attr construct
func NewSceneAttr(root object.Object) *SceneAttr {
	attr := &SceneAttr{root: root}

	return attr
}

// Scene
type Scene struct {
	object.ObjectWitness
	archive *SceneArchive // archive
	attr    *SceneAttr    // attr
}

// Scene construct
func NewScene() *Scene {
	o := &Scene{}
	o.archive = NewSceneArchive(o)
	o.attr = NewSceneAttr(o)
	o.Witness(o)
	return o
}

// Scene store
func (o *Scene) Store() {
}

// Scene type
func (o *Scene) Type() string {
	return "scene"
}

// Scene entity name
func (o *Scene) Entity() string {
	return "Scene"
}

// Scene load
func (o *Scene) Load() {
}

// set id
func (o *Scene) SetId(val int64) {
	o.archive.SetId(val)
}

// db id
func (o *Scene) DBId() int64 {
	return o.archive.DBId()
}

// get archive
func (o *Scene) Archive() interface{} {
	return o.archive
}

// get attr
func (o *Scene) Attr() interface{} {
	return o.attr
}

// set Name 场景名
func (o *Scene) SetName(name string) {
	if o.Dummy() && !o.Sync() {
		o.UpdateAttr("Name", name, nil)
		return
	}
	if o.attr.Name == name {
		return
	}
	old := o.attr.Name
	o.attr.Name = name
	o.UpdateAttr("Name", name, old)
}

// get Name 场景名
func (o *Scene) Name() string {
	return o.attr.Name
}

// set Resource 资源
func (o *Scene) SetResource(resource string) {
	if o.Dummy() && !o.Sync() {
		o.UpdateAttr("Resource", resource, nil)
		return
	}
	if o.attr.Resource == resource {
		return
	}
	old := o.attr.Resource
	o.attr.Resource = resource
	o.UpdateAttr("Resource", resource, old)
}

// get Resource 资源
func (o *Scene) Resource() string {
	return o.attr.Resource
}

// attr type
func (o *Scene) AttrType(name string) string {
	switch name {
	case "Name":
		return "string"
	case "Resource":
		return "string"
	default:
		return "unknown"
	}
}

// attr expose info
func (o *Scene) Expose(name string) int {
	switch name {
	case "Name":
		return object.EXPOSE_NONE
	case "Resource":
		return object.EXPOSE_NONE
	default:
		panic("unknown")
	}
}

// get all attr name
func (o *Scene) AllAttr() []string {
	return []string{"Name", "Resource"}
}

// get attr index by name
func (o *Scene) AttrIndex(name string) int {
	switch name {
	case "Name":
		return 0
	case "Resource":
		return 1
	default:
		return -1
	}
}

// get attr value
func (o *Scene) FindAttr(name string) interface{} {
	switch name {
	case "Name":
		return o.attr.Name
	case "Resource":
		return o.attr.Resource
	default:
		return nil
	}
}

// set attr value
func (o *Scene) SetAttr(name string, value interface{}) error {
	switch name {
	case "Name":
		if v, ok := value.(string); ok {
			o.SetName(v)
			return nil
		}
		return fmt.Errorf("attr Name type not match")
	case "Resource":
		if v, ok := value.(string); ok {
			o.SetResource(v)
			return nil
		}
		return fmt.Errorf("attr Resource type not match")
	default:
		return fmt.Errorf("attr %s not found", name)
	}
}

// gob interface
func (o *Scene) GobEncode() ([]byte, error) {
	w := new(bytes.Buffer)
	encoder := gob.NewEncoder(w)
	var err error

	err = encoder.Encode(o.archive)
	if err != nil {
		return nil, err
	}
	err = encoder.Encode(o.attr)
	if err != nil {
		return nil, err
	}
	return w.Bytes(), nil
}

func (o *Scene) GobDecode(buf []byte) error {
	r := bytes.NewBuffer(buf)
	decoder := gob.NewDecoder(r)
	var err error

	err = decoder.Decode(o.archive)
	if err != nil {
		return err
	}
	err = decoder.Decode(o.attr)
	if err != nil {
		return err
	}
	return nil
}

// gob register
func init() {
	gob.Register(&Scene{})
	gob.Register(&SceneArchive{})
	gob.Register([]*Scene{})
	gob.Register([]*SceneArchive{})
	registObject("entity.Scene", func() object.Object { return NewScene() })
}
