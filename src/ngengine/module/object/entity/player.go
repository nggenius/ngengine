// Code generated by data parser.
// DO NOT EDIT!
package entity

import (
	"encoding/gob"
	"encoding/json"
	"fmt"
	"ngengine/module/object"

	"github.com/mysll/toolkit"
)

var _ = json.Marshal
var _ = toolkit.ParseNumber

// tuple Pos 位置
type PlayerPos_t struct {
	X float32 //
	Y float32 //
	Z float32 //
}

// tuple Pos construct
func NewPlayerPos() *PlayerPos_t {
	pos := &PlayerPos_t{}
	return pos
}

// tuple Pos Set
func (pos *PlayerPos_t) Set(x float32, y float32, z float32) {

	pos.X = x
	pos.Y = y
	pos.Z = z
}

// tuple Pos Get
func (pos *PlayerPos_t) Get() (x float32, y float32, z float32) {
	return pos.X, pos.Y, pos.Z
}

// tuple Pos equal other
func (pos *PlayerPos_t) Equal(other PlayerPos_t) bool {
	if (pos.X == other.X) && (pos.Y == other.Y) && (pos.Z == other.Z) {
		return true
	}
	return false
}

// Player archive
type PlayerArchive struct {
	root object.Object `xorm:"-"`
	flag int           `xorm:"-"`

	Id     int64
	Name   string       `xorm:"varchar(128)"` // 玩家名
	Pos    *PlayerPos_t `xorm:"json"`         // 位置
	Orient float32      // 朝向(弧度)
}

// db id
func (a *PlayerArchive) DBId() int64 {
	return a.Id
}

// Player archive construct
func NewPlayerArchive(root object.Object) *PlayerArchive {
	archive := &PlayerArchive{root: root}

	archive.Pos = NewPlayerPos()

	return archive
}

// archive table name
func (a *PlayerArchive) TableName() string {
	return "player"
}

// archive creater
type PlayerArchiveCreater struct {
}

func (c *PlayerArchiveCreater) Create() interface{} {
	return &PlayerArchive{}
}

func (c *PlayerArchiveCreater) CreateSlice() interface{} {
	return &[]*PlayerArchive{}
}

// Player attr
type PlayerAttr struct {
	root object.Object

	GroupId     int32 // 分组
	Invisible   byte  // 是否不可见(1不可见)
	VisualRange int32 // 可视范围
}

// Player attr construct
func NewPlayerAttr(root object.Object) *PlayerAttr {
	attr := &PlayerAttr{root: root}

	return attr
}

// Player
type Player struct {
	object.ObjectWitness
	archive *PlayerArchive // archive
	attr    *PlayerAttr    // attr
}

// Player construct
func NewPlayer() *Player {
	o := &Player{}
	o.archive = NewPlayerArchive(o)
	o.attr = NewPlayerAttr(o)
	o.Witness(o)
	return o
}

// Player store
func (o *Player) Store() {
}

// Player type
func (o *Player) Type() string {
	return "player"
}

// Player entity name
func (o *Player) Entity() string {
	return "Player"
}

// Player load
func (o *Player) Load() {
}

// get archive
func (o *Player) Archive() *PlayerArchive {
	return o.archive
}

// get attr
func (o *Player) Attr() *PlayerAttr {
	return o.attr
}

// set Name 玩家名
func (o *Player) SetName(name string) {
	if o.archive.Name == name {
		return
	}
	old := o.archive.Name
	o.archive.Name = name
	o.UpdateAttr("Name", name, old)
}

// get Name 玩家名
func (o *Player) Name() string {
	return o.archive.Name
}

// set GroupId 分组
func (o *Player) SetGroupId(groupid int32) {
	if o.attr.GroupId == groupid {
		return
	}
	old := o.attr.GroupId
	o.attr.GroupId = groupid
	o.UpdateAttr("GroupId", groupid, old)
}

// get GroupId 分组
func (o *Player) GroupId() int32 {
	return o.attr.GroupId
}

// set Invisible 是否不可见(1不可见)
func (o *Player) SetInvisible(invisible byte) {
	if o.attr.Invisible == invisible {
		return
	}
	old := o.attr.Invisible
	o.attr.Invisible = invisible
	o.UpdateAttr("Invisible", invisible, old)
}

// get Invisible 是否不可见(1不可见)
func (o *Player) Invisible() byte {
	return o.attr.Invisible
}

// set VisualRange 可视范围
func (o *Player) SetVisualRange(visualrange int32) {
	if o.attr.VisualRange == visualrange {
		return
	}
	old := o.attr.VisualRange
	o.attr.VisualRange = visualrange
	o.UpdateAttr("VisualRange", visualrange, old)
}

// get VisualRange 可视范围
func (o *Player) VisualRange() int32 {
	return o.attr.VisualRange
}

// set Pos 位置
func (o *Player) SetPos(pos PlayerPos_t) {
	old := *o.archive.Pos
	*o.archive.Pos = pos
	o.UpdateTuple("Pos", pos, old)
}

// set Pos detail
func (o *Player) SetPosXYZ(x float32, y float32, z float32) {
	old := *o.archive.Pos
	o.archive.Pos.Set(x, y, z)
	o.UpdateTuple("Pos", *o.archive.Pos, old)
}

// get Pos 位置
func (o *Player) Pos() PlayerPos_t {
	return *o.archive.Pos
}

// get Pos detail
func (o *Player) GetPosXYZ() (x float32, y float32, z float32) {
	return o.archive.Pos.Get()
}

// set Orient 朝向(弧度)
func (o *Player) SetOrient(orient float32) {
	if o.archive.Orient == orient {
		return
	}
	old := o.archive.Orient
	o.archive.Orient = orient
	o.UpdateAttr("Orient", orient, old)
}

// get Orient 朝向(弧度)
func (o *Player) Orient() float32 {
	return o.archive.Orient
}

// attr type
func (o *Player) GetAttrType(name string) string {
	switch name {
	case "Name":
		return "string"
	case "GroupId":
		return "int32"
	case "Invisible":
		return "byte"
	case "VisualRange":
		return "int32"
	case "Pos":
		return "tuple"
	case "Orient":
		return "float32"
	default:
		return "unknown"
	}
}

// attr expose info
func (o *Player) Expose(name string) int {
	switch name {
	case "Name":
		return object.EXPOSE_OWNER
	case "GroupId":
		return object.EXPOSE_NONE
	case "Invisible":
		return object.EXPOSE_NONE
	case "VisualRange":
		return object.EXPOSE_NONE
	case "Pos":
		return object.EXPOSE_ALL
	case "Orient":
		return object.EXPOSE_ALL
	default:
		panic("unknown")
	}
}

// get all attr name
func (o *Player) AllAttr() []string {
	return []string{"Name", "GroupId", "Invisible", "VisualRange", "Pos", "Orient"}
}

// get attr index by name
func (o *Player) AttrIndex(name string) int {
	switch name {
	case "Name":
		return 0
	case "GroupId":
		return 1
	case "Invisible":
		return 2
	case "VisualRange":
		return 3
	case "Pos":
		return 4
	case "Orient":
		return 5
	default:
		return -1
	}
}

// get attr value
func (o *Player) GetAttr(name string) interface{} {
	switch name {
	case "Name":
		return o.archive.Name
	case "GroupId":
		return o.attr.GroupId
	case "Invisible":
		return o.attr.Invisible
	case "VisualRange":
		return o.attr.VisualRange
	case "Pos":
		return *o.archive.Pos
	case "Orient":
		return o.archive.Orient
	default:
		return nil
	}
}

// set attr value
func (o *Player) SetAttr(name string, value interface{}) error {
	switch name {
	case "Name":
		if v, ok := value.(string); ok {
			o.SetName(v)
			return nil
		}
		return fmt.Errorf("attr Name type not match")
	case "GroupId":
		if v, ok := value.(int32); ok {
			o.SetGroupId(v)
			return nil
		}
		return fmt.Errorf("attr GroupId type not match")
	case "Invisible":
		if v, ok := value.(byte); ok {
			o.SetInvisible(v)
			return nil
		}
		return fmt.Errorf("attr Invisible type not match")
	case "VisualRange":
		if v, ok := value.(int32); ok {
			o.SetVisualRange(v)
			return nil
		}
		return fmt.Errorf("attr VisualRange type not match")
	case "Pos":
		if v, ok := value.(PlayerPos_t); ok {
			o.SetPos(v)
			return nil
		}
		return fmt.Errorf("attr Pos type not match")
	case "Orient":
		if v, ok := value.(float32); ok {
			o.SetOrient(v)
			return nil
		}
		return fmt.Errorf("attr Orient type not match")
	default:
		return fmt.Errorf("attr %s not found", name)
	}
}

// gob register
func init() {
	gob.Register(&Player{})
	gob.Register(&PlayerArchive{})
	gob.Register([]*Player{})
	gob.Register([]*PlayerArchive{})
}
